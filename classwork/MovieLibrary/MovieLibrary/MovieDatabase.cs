using System;
using System.Collections.Generic;
using System.Linq;


namespace MovieLibrary
{
    //Interfaces appear on the same line as base types but ARE NOT base type
    //MovieDatabase implements ImovieDatabase
    // A type can implement any # of interfaces
    // All members on an interface must be public and implemented

    //Abstract class required if any member is abstract
    // 1. Cannot be instantiated
    // 2. Must derive from it 
    // 3. Must implement all abstract members

    /// <summary>Provides the base implementation of a database of movies.</summary>
    public abstract class MovieDatabase : IMovieDatabase  // IEditableDatabase, IReadableDatabase
    {
       
        //Not on interface
       // public void Foo () { }
        public Movie Add ( Movie movie )
        {
            //Exception type is the base type of all exceptions
            //Aurguments should always fall with  Argument exception
            // Exception 
           // ArgumentException -> generic argument exception
            //    ArgumentNullException -> argument is null and it shouldn't be 
            //    ArgumentOutOfRangeException -> argument is outside excepted range (generally numeric)
            // ValidationException -> IValidatableObject fails
            // InvalidOperationException -> The operation is not currently valid but may be in the future
           // SystemException -> Only generated by runtime
           // NullReferenceException -> null is on left side of member access ( null.???)
           //StackOverFlowException -> Stack overflowed
           // OutOfMemoeryException -> Out of memory

            //Throw an exception using throw expressoin
            //  throw - expression :: = throw E
            //       E must be Exception
            //Movie is not null
            if (movie == null)
              throw new ArgumentNullException(nameof(movie)) ;   //Argument is null and it shouldn't be, pretty much all reference types
          
            //Movie is valid
            new ObjectValidator().ValidateFullObject(movie);
            //if (results.Count() > 0)
            //{
            //    foreach (var result in results)
            //    {
            //        error = result.ErrorMessage;
            //        return null;
            //    };
            //};


            // Movie name is unique
           // var existing = GetByName(movie.Name);
            // if (existing != null)
            //throw new InvalidOperationException("Movie must be unique");

            //Throw expression :: - E  throw E
            var existing = GetByName(movie.Name)?? throw new InvalidOperationException("Movie must be unique");
            //{
            //    error = "Movie must be unique";
            //    return null;
            //};

            //TOOO: Generalize errors
            return AddCore(movie);
        }

       
        public void Delete ( int id )
        {
            //Validate Id >= 0
            if (id <=0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");

            //TOOO: Generalize errors
            DeleteCore(id);

        }

        //Use IEnumerable<T> for readonly lists of items
        //public Movie[] GetAll ()
        public IEnumerable<Movie> GetAll ()
        {
            // object value = null;
            //  value.ToString();

            //TOOO: Generalize errors
            return GetAllCore();
        }

        public Movie Get ( int id )
        {
            //TOOO: id >= 0
            if (id <=0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");

            //TOOO: Generalize errors
            return GetByIdCore(id);
        }
        public void Update ( int id, Movie movie )
        {
            //Validation
            if (id <=0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");
            if (movie == null)
                throw new ArgumentNullException(nameof(movie));



            //Movie is valid
            new ObjectValidator().ValidateFullObject(movie);
            //var results = new ObjectValidator().TryValidateFullObject(movie);
            //if (results.Count() > 0)
            //{
            //    foreach (var result in results)
            //    {
            //        return result.ErrorMessage;
                   
            //    };
            //};

            // Movie name is unique
            var existing = GetByName(movie.Name);
            if (existing != null && existing.Id != id)
               throw new InvalidOperationException("Movie must be unique");

            //TOOO: Generalize errors
            UpdateCore(id, movie);
        }
        protected abstract Movie AddCore ( Movie movie );

        protected abstract void DeleteCore ( int id );

        protected virtual Movie GetByName ( string name )
        {
            foreach (var movie in GetAll())
            {
                if (String.Compare(movie.Name, name, true) == 0)
                    return movie;
            };

            return null;
        }

        protected abstract IEnumerable<Movie> GetAllCore ();

        protected abstract Movie GetByIdCore ( int id );

        protected abstract void UpdateCore ( int id, Movie movie );
    }
}
